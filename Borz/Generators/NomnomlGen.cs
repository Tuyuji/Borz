using System.Drawing;
using System.Reflection;
using Borz.Languages.C;

namespace Borz.Generators;

public class NomnomlGen : Generator
{
    private string? GetTagColor(string tagName)
    {
        if (Borz.Config.Get("tag", "colors", tagName) != null)
        {
            var tc = Borz.Config.Get("tag", "colors", tagName);
            return tc.Value;
        }

        return null;
    }
    
    public override (bool success, string error) Generate(Workspace ws, Options opt)
    {
        var sortedProjects = ws.GetSortedProjectList();
        if (sortedProjects == null)
        {
            //GetSortedProjectList will already log about why it returned null, remind them.
            return (false, "Please see above.");
        }
        
        string warningText = "# Generated by Borz\n" +
                             "# Borz version: " + Assembly.GetExecutingAssembly().GetName().Version + "\n" +
                             "# Options config: " + opt.Config + "\n";
        
        var fileLoc = Path.Combine(ws.Location, "diagram.nomnoml");
        using var fs = new FileStream(fileLoc, FileMode.Create, FileAccess.Write);
        using var writer = new StreamWriter(fs);
        
        writer.WriteLine(warningText);

        List<string> tagsWithColors = new List<string>();

        foreach (var project in sortedProjects)
        {
            foreach (var tag in project.Tags)
            {
                if(tagsWithColors.Contains(tag))
                    continue;
                var color = GetTagColor(tag);
                if (color == null) continue;
                writer.WriteLine($"#.{tag}: fill={color}");
                tagsWithColors.Add(tag);
            }
        }
        
        foreach (var project in sortedProjects)
        {
            string prjTag = $"[{project.Name}]";
            string projectLine = prjTag;
            foreach (var tag in project.Tags)
            {
                if (tagsWithColors.Contains(tag))
                {
                    projectLine = $"[<{tag}> {project.Name}]";
                    break;
                }
            }
            writer.WriteLine(projectLine);
            foreach (var projectDependency in project.Dependencies)
            {
                writer.WriteLine($"{prjTag}-->[{projectDependency.Name}]");
            }

            if (project is CProject projectC)
            {
                foreach (var pkgDep in projectC.PkgDeps)
                {
                    var pkgDepName = $"PkgDep#{pkgDep.Key.GetHashCode():X}";
                    writer.Write($"[{pkgDepName} ");
                    foreach (string lib in pkgDep.Key.Libs)
                    {
                        writer.Write($"| {lib}");
                    }
                    writer.Write("]\n");
                    writer.WriteLine($"{prjTag}->[{pkgDepName}]");
                }
            }
        }
        
        writer.Flush();
        return (true, string.Empty);
    }
}